package com.iphone567.user.dao.imp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.List;

import com.iphone567.user.dao.UserDAO;
import com.iphone567.user.domain.User;
import com.iphone567.utils.DBUtils;

public class UserDAOImp implements UserDAO {

	private final Connection conn = DBUtils.getConnection();

	@Override
	public int add(User user) {
		PreparedStatement prepareStatement = null;
		try{
			String sql = "insert into user values(null,?,?,?,?,?,?,?,null)";
			prepareStatement = conn.prepareStatement(sql);
			prepareStatement.setString(1, user.getUsername());
			prepareStatement.setString(2, user.getPassword());
			prepareStatement.setInt(3, user.getAge());
			prepareStatement.setString(4, user.getEmail());
			prepareStatement.setString(5, user.getGender());
			prepareStatement.setString(6, user.getDescirption());
			prepareStatement.setString(7, user.getBrithday());
			return prepareStatement.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeAll(null, prepareStatement, null);
		}
		
		return 0;
	}

	@Override
	public int delete(User user) {
		PreparedStatement prepareStatement = null;
		try{
			String sql = "delete from user where id=?";
			prepareStatement = conn.prepareStatement(sql);
			prepareStatement.setInt(1, user.getId());
			return prepareStatement.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeAll(null, prepareStatement, null);
		}
		
		return 0;
	}

	@Override
	public int update(User user) {
		PreparedStatement prepareStatement = null;
		try{
			String sql = "update user set password=? age=? email=? gender=? description=? brithday=?";
			prepareStatement = conn.prepareStatement(sql);
			prepareStatement.setString(1, user.getUsername());
			prepareStatement.setString(2, user.getPassword());
			prepareStatement.setInt(3, user.getAge());
			prepareStatement.setString(4, user.getEmail());
			prepareStatement.setString(5, user.getGender());
			prepareStatement.setString(6, user.getDescirption());
			prepareStatement.setString(7, user.getBrithday());
			return prepareStatement.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeAll(null, prepareStatement, null);
		}
		
		return 0;
	}

	@Override
	public List<User> findAllUsers() {
		return null;
	}

	@Override
	public User findUserByUsername(String username) {
		return null;
	}

	@Override
	public User find(Integer id) {
		return null;
	}

}
