package com.iphone567.proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class Person {
	public static void main(String[] args) {
		// 主人代理一只狗去开冰箱
		
		
		Dog dog = new Dog();
		
		Dosomething 主人 = (Dosomething)Proxy.newProxyInstance(Dosomething.class.getClassLoader(), new Class[]{Dosomething.class}, new InvocationHandler() {
			
			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				System.out.println("主人打开冰箱，查看有没骨头。");
				System.out.println("给狗一个骨头");
				// 调用原方法
				method.invoke(dog, args);
				System.out.println("主人关冰箱");
				return null;

			}
		});
		
		主人.doSomething("狗吃骨头");
	}
}
